const express = require('express')
const path = require('path')
const {open} = require('sqlite')
const sqlite3 = require('sqlite3')
const app = express()
app.use(express.json())
const dbPath = path.join(__dirname, 'todoApplication.db')
let db = null
const initializeDBAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () => {
      console.log('Server is running at http://localhost:3000/')
    })
  } catch (e) {
    console.log(`DB Error:${e.message}`)
    process.exit(1)
  }
}
initializeDBAndServer()

//API for creating a table called todo
app.post('/todos/', async (request, response) => {
  const createTableQuery = `
  CREATE TABLE IF NOT EXISTS todo(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    todo TEXT NOT NULL,
    priority TEXT NOT NULL,
    status TEXT NOT NULL
  )`
  await db.run(createTableQuery)
})

//API 1 -- returning rows based on query parameters
app.get('/todos/', async (request, response) => {
  const {todo = '', priority = '', status = '', search_q = 'Play'} = request.query
  const getTodoDataQuery = `
  SELECT * FROM todo
  WHERE todo LIKE '%${todo}%' 
  AND priority LIKE '%${priority}%' 
  AND status LIKE '%${status}%'
  AND todo LIKE '${search_q}';`
  const dbResponse = await db.all(getTodoDataQuery)
  const result = dbResponse.map(eachItem => ({
    id: eachItem.id,
    todo: eachItem.todo,
    priority: eachItem.priority,
    status: eachItem.status,
  }))
  response.send(result)
})

//API 2 -- getting a todo item based on its id
app.get('/todos/:todoId', async (request, response) => {
  const {todoId} = request.params
  const getTodoDataQuery = `
  SELECT * FROM todo
  WHERE id = ${todoId};`
  const dbResponse = await db.all(getTodoDataQuery)
  const result = {
    id: eachItem.id,
    todo: eachItem.todo,
    priority: eachItem.priority,
    status: eachItem.status,
  }
  response.send(result)
})

//API 3 -- creating a todo object in the todo table
app.post('/todos/', async (request, response) => {
  const todoDetails = request.body
  const {id, todo, priority, status} = todoDetails
  const addNewTodoQuery = `
  INSERT INTO todo (id,todo,priority,status)
  VALUES (?,?,?,?);`
  await db.run(addNewTodoQuery, [id, todo, priority, status])
  response.send('Todo Successfully Added')
})

//API 4 -- updating todo application based on its todo ID
app.put('/todos/:todoId', async (request, response) => {
  const {todoId} = request.params
  const {key, value} = request.body
  const updateTodoItemQuery = `
  UPDATE todo 
  SET ${key} = ?
  WHERE id = ?;`
  await db.run(updateTodoItemQuery, [value, todoId])
  response.send(`${key} Updated`)
})

//API 5 -- Deleting a todo id based on its ID
app.delete('/todos/:todoId', async (request, response) => {
  const {todoId} = request.params
  const deleteQuery = `
  DELETE FROM todo WHERE id = ${todoId};`
  await db.run(deleteQuery)
  response.send('Todo Deleted')
})

//
module.exports = app

