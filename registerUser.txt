const express = require('express')
const path = require('path')
const {open} = require('sqlite')
const sqlite3 = require('sqlite3')
const bcrypt = require('bcrypt')

const app = express()
app.use(express.json())
const dbPath = path.join(__dirname, 'userData.db')
let db = null

const initializeDBAndServer = async () => {
  try {
    // Initializing Database
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    })

    // initializing server
    app.listen(3000, () => {
      console.log('Server running at http://localhost/3000/')
    })
  } catch (e) {
    console.log(`DB Error: ${e.message}`)
    process.exit(1)
  }
}

initializeDBAndServer()

// API 1 -- registering a new user in user table if he doesn't exist

app.post('/register/', async (request, response) => {
  const {username, name, password, gender, location} = request.body

  // encrypting password so that we can store encrypted password on user table
  const encryptedPassword = await bcrypt.hash(password, 10)

  // query that check if the given user is new or an existing one
  const selectUserQuery = `
  SELECT * FROM user WHERE username = '${username}';`

  const dbUser = await db.get(selectUserQuery)

  if (dbUser === undefined) {
    const dbPassLength = dbUser.password.length
    if (dbPassLength < 5) {
      response.status(400)
      response.send('Password too short')
    } else {
      // creating a new user
      const createUserQuery = `
        INSERT INTO user(username, name, password, gender, location)
        VALUES('${username}','${name}','${encryptedPassword}','${gender}','${location}');`

      await db.run(createUserQuery)
      response.status(200)
      response.send('User created successfully')
    }
  } else {
    response.status(400)
    response.send('User already exists')
  }
})

module.exports = app
